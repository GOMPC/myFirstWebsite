web1-html에 의존하는 수업.

수업 소개

여행의 목적 : 	처음 웹이 등장했을때 html만 존재. 전자문서 제작가능, 컴퓨터를 통해 정보 표현 가능! 
		또한 이 정보를 인터넷을 통해 누구나 접할 수 있다.
		처음엔 이것으로도 혁신이었겠지만, 불편함, 불만족이 생겨나기 시작했다.
		여기서 관심사는 아름다우면서 보기좋게 할수는 없을까? 라는 불만족에서 시작.
		html로만 만들어진 웹 문서를 아름답게 만들어보자!

글꼴, 크기, 색상, 정렬, 배경이미지 등등의 불만족

두가지 길 
1) 쉽지만 한계가 있다. -> 디자인에 대한 새로운 태그 추가<font>
2) 어렵지만 근본적인 해결책. -> 디자인에 최적화된 완전히 새로운 언어를 만든다

우선 쉬운길로 가보고 그 한계에 도착해 CSS를 만들게 되었다.

디자인을 위한 태그 <font>
처음에는 이것만으로도 행복했다.
하지만 웹페이지가 많아지고 웹에 대한 기술이 중요해짐에 따라 한계를 느끼게 된다.

한계
-font태그는 그저 디자인을 위한 태그일 뿐 h1태그, a태그처럼 정보적 의미가 없다. 마치 br과 p의 차이처럼
-또한 1억개의 태그를 매일매일 바꿔야한다면? 윗대가리가 색깔을 매일 기분에 따라 바꾼다면?

CSS 두두등장!

<!-- 내용
내용
--> 주석인가!

초기의 웹브라우저는 html만 읽을 수 있었다.
css를 넣는다면 html을 읽을 수 있나? 다른 언어인걸?
<style> 내용
</style> 		<----- html태그 : style태그 안쪽의 내용은 css이니 css문법에 맞게 해석하도록

1억개의 a태그를 붙인 글자의 색상을 바꾸는 똑같은 결과를 만드는데
1억개의 font태그를 안바꾸고 한줄이면 똑딱!
또한 어떠한 경우에는 font태그만 바꿨을지라도 다른것이 바뀌어서 난리날 수 있지만 그럴일이 적어진다.
즉, 유지보수가 훨씬 편리해지고 가독성또한 높아진다.

중복은 시스템화 할 수 있다. 중복을 줄인다는게 코딩을 더 생산성있게 만든다.
중복 멈춰!

효과적으로 디자인하기 위한 언어. + 정보와 디자인의 분리
또한 디자인에 관한 것들은 <style>에 분리되어 있기때문에, 문서자체에는 정보와 관련된 태그만 존재한다.
HTML은 정보에 전념. 

1. 분업 2. 생산성

--------------------------------------------

웹페이지에 CSS를 삽입하는 방법
1.<style> - </style>로 분리해두는것.
2.태그에 style속성추가 style="CSS str"

style속성은 html의 속성. 그 뜻이 CSS str을 css의 효과가 들어온다
style태그는 누구에게 지정할 것인지 a { } (선택자selector)가 필요하다. 
a{color:black;}의 경우 a선택자에게 지정될 효과. (효과)라고도 하고 (declaration)이라 합니다. (선언)
style속성은 style속성을 가진 태그가 위치하고 있는 태그에 바로 효과를 주기 때문에 선택자가 필요없다!

효과를 지정한 끝에는 ;을 붙이자.
효과가 여러개라면 프로그램이 어떻게 구분하것냐. color:red;text-decoration:underline;

----------------------------------------------

<style>
a { 
	color:red;
}
</style>

의 경우. a는 선택자(selector) color:red;는 효과(declaration,선언) color는 속성(property) red는 속성값(property value)

두가지의 길
어떤 property가 존재하는가
어떤 선택자가 존재하는가. (이 효과를 더 정확하게 선택해서 지정하기 위해)

-----------------------------------------------

직접! 스스로! 모르는 효과를 찾자.
그 property의 value의 종류도 확인하고!
property를 굳이 암기하지 않으려 해도 된다. 찾아보면 1분이면 나온다!
또한 property를 작성하는 와중에도 자동완성 도와주고 value값도 자동완성 도와준다!
개쉽다! 그냥 원리에 대해 이해하자.
property를 알고 value에 대해 알고 쓸 수 있다면 다 할 수 있다!

align : 정렬하다

-----------------------------------------------

선택자 또한 스스로 알아내보자!

모든 a태그 기본 black
방문한 적이 있었던 것은 gray
현재 머물고 있는 링크는 red

class 묶는다 그룹화하다.
class라는 속성의 값은 여러개의 값이 올 수 있다. 띄워쓰기로 구분한다.
하나의 태그에는 여러개의 속성이 올 수 있고
여러개의 선택자를 통해 하나의 태그를 공동으로 제어할 수 있다.

class="saw"일때
saw클래스 선택자를 뜻하는 문법은 .saw
앞에 .을 붙여보자. (.class맨~)
그냥 saw{
color:gray;
} 해버리면 이것의 의미는 saw태그 기염둥이들의 색깔을 gray로 바꾸라는 뜻이 되어버린다

.saw{
color:gray;
} 하면 클래스값이 saw인 태그 기염둥이들의 색깔을 gray로!

만약 하나의 클래스가 두가지 값을 가지고 있고 (saw, active)
style태그를
.saw{ color:gray; }
.active{ color:red; }
를 하게된다면 프로그래밍 순서에 따라 그 문자는 gray로 갓다가 결국엔 red로만 가게된다.

우선순위를 부여하고 싶다! --> id선택자

클래스 값 말고 새로운 태그 속성에 id="active" 조져놓고
#active{ color:red; } 를 하게되면
active가 맨위에서 실행되더라도 (그 뒤에 saw 클래스 값이 gray로 설정되는 코드가 있더라도)
active속성을 가진 문자는 red색상으로 나오게 된다.

우선순위!

또한 a태그를 선택자로 지정해서 다 black으로 감쌌는데
클래스값 saw를 gray로 하니 gray가 된다

선택자 우선순위
태그<<클래스<<id선택자

원리를 기억하자.

또한 왜? 라는 의문을 가지자.

id값이 active인 친구가 하나 등장했다면 그 문서에서는 하나 더 쓰면 안대용
id자체가 학번, 주민등록번호같은 것이지.

3학년 7반 24번 곰피씨로 예를 들자면
곰피씨는 3학년 태그의 7반 클래스의 24번 id값을 가진 존재.

우선순위는 포괄적인 선택자보다 더 구체적인 것을 우선한다.

전체적인 디자인을 짜고 세세한 것(예외를 두는 것)들을 만드는것이 생산성에 도움이 되기 때문. 효율적이다!

-----------------------------------------------

박스 모델

h1태그는 실행해보면 한줄을 통으로 전세내서 쓴다.
a태그는 실행해보면 그 텍스트만큼만 전세내서 쓴다.

HTML의 여러 태그들은 그 태그의 성격과 쓰임에 따라서 이렇게 나뉜다.
>>h1태그는 block level element이고 a태그는 inline element라는 것이다.

그러나 block level이라도 css로 display:inline;
반대로 inline의 경우에도 css로 display:block; 이렇게 사용해서 전세내는 크기를 바꿀수도 있다!
즉, block level element와 inline element는 display라는 속성의 기본값일 뿐
그 기본값은 CSS를 통해 언제든지 바꿀 수 있다.

*display:none;으로 화면에서 사라지게 할 수도 있다. 짜잔!

선택자에서 ,를 사용해서 코드의 중복을 없앨 수 있다!


/*
주석
*/

<!-- 
주석
-->

margin 여백
padding 패딩! 충전재

태그는 margin>>border>>padding>>text로 크기가 이루어져있다.

HTML태그 하나하나를 일종의 박스로 취급, 그것의 부피감을 결정.
그것은 디자인에서 핵심적인 요소일것이다! 사요나라~

-----------------------------------------------

박스모델 써먹기

문제의 원인이 뭔지 도구로 먼저 파악해볼것.

왜 margin을 먼저 0으로 잡고 padding을 잡는가에 대해 생각해볼것.

그렇게 했음에도 왜 내 줄은 화면끝까지 안가고 끄트머리 즈음에 멈추는가?
body또한 margin을 차지하고 있었다!

ul태그 또한 block level element라 오른쪽 줄을 주게 되면 화면끄트머리로 가버렷~
그럴때 css로 폭을 지정할 수 있다! 지정해서 이쁘게 이쁘게 하자.

-----------------------------------------------

그리드

정보를 잘 배치하는 = 레이아웃을 잘 짤것인가!

div태그. 무색무취한 (디자인 용도만의) 태그

div태그는 block level element. inline용으로 span태그가 있다.

두개의 태그를 나란히 혹은 어떤 방식으로 배치하기 위해서는 부모태그가 필요하다.

fr
150px 1fr = 150픽셀, 나머지
1fr 1fr = 1:1비율
2fr 1fr = 2:1비율

caniuse.com << css html javascript의 기술 통계를 볼수 있다. 얼마나 자주쓰나 어디서 작동하는가

-----------------------------------------------

미디어 쿼리 소개

화면의 크기에 따라서 웹페이지의 각 요소들이 반응해서 최적화된 모양으로 바뀌게 하는 것.
반응형 웹, 반응형 디자인(responsible web)

-----------------------------------------------

미디어 쿼리 써먹기

한번 해보자. html.html이놈이 화면이 개짝아지면 위에 web도 좀 줄이고
grid로 나눈 애들도 그냥 원래대로 바꾸게.

500px기준


-----------------------------------------------

CSS 코드의 재사용

다른 페이지에도 적용해야지!
4개 페이지 다 하니까 노가다네 ㅅㅂ
만약 이 노가다가 1억개라면? 링크에 색깔을 바꾸는 지랄을 매일 한다면?

중복의 제거라는것이 엄청나게 중요하다. 새로운 기술이 출현하게 될 것이다!

<link>
야이 짜식아 style은 저 파일꺼 갖다써라.

style.css파일을 만들자.
style태그의 내용을 복사해서 붙여넣고
<link rel="stylesheet" href="style.css">
이렇게 하고 모든 페이지의 style태그를 없애고 똑같이 한줄만 박아넣자.

호에에에엥~~~~~~~~~~
그럼 style.css파일에서만 한번 톡 바꾸면 모든 페이지가 싸아아아악 바뀌겟네.
+ 코드의 양이 줄었기 때문에 인터넷 사용량도 줄어든다.

하나의 웹 페이지. 여러개의 파일?
웹페이지 안에 css코드 내장 

네트워크 측에서는 css코드 내장이 더 효율적일수도.

하지만~ cashing이 잇지롱 (저장하다)
한번 받았으면 저 파일이 바뀌기 전까지는 각자 컴에 저장해줫다가
다른 페이지에서 필요로 할 경우 바로 갖다쓰면 개꿀
(네트워크를 안써서 속도도 빨라지고 사업자들은 돈을 덜 쓰쥬)

-----------------------------------------------

마무리

속성 ->더 풍부한 표현력 동사랄까..V
선택자 -> 더 정확한 표현력 목적어랄까..O

여기서 멈추고 좀 써먹어보실?
만들다보면 디자인/기술적으로 부족한 부분이 보일 것이다.
그걸 채워가다보면 개념들이 샤라락 쇽쇽
그러다보면 알아서 깨닫게 되지 않을까?

-----------------------------------------------

어디서 문제가 났는지
그냥 오타나면 그냥 버리고 실행하기때문에 찾는데 개빡세다.
-----------------------------------------------
-----------------------------------------------
-----------------------------------------------
