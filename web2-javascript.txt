WEB2- javascript

수업소개

인간의 욕심은 끝이 없다.
상호작용하고싶다!
html은 정적이다. 웹페이지도 동적으로 사용자와 상호작용 드가자~

html를 이용해서 웹페이지를 만든 후에 javascript를 이용해 상호작용

마법을 사용해보자! 마법사가 되어보자!!

-------------------------------------------

수업의 목적

문법과 사용법을 주르륵 알려주는게 아니라
하나의 기능을 위해 문법을 읽혀간다.

onclick이라는 속성의 값으로는 반드시 javascript가 와야합니다.
style속성의 속성값으로는 반드시 css가 옵니다.

javascript는 사용자와 상호작용을 하는 언어이다.
웹브라우저는 한번 화면에 출력되면 자기 자신을 바꿀 수 없다.
javascript가 html을 제어하는 언어이다.

-------------------------------------------

HTML과 JS의 만남 : script태그

JS를 넣는 방법
웹브라우저에게 html의 코드로 JS시작됩니다 알려줘야징  -> script태그

JS로 문서를 쓰는거나
HTML로 문서를 쓰나 출력하는 것은 똑같이 나오지않냐?

JS에 Hello World , HTML에 Hello World 똑같이 나온다
하지만, 1+1을 하면 JS에서는 2, HTML에서는 1+1이 나온다!

-------------------------------------------

HTML과 JS의 만남 : 이벤트

웹브라우저 위에서 일어나는 일 : 사건, 이벤트
버튼을 누르면 무엇을 해라! onclick
내용이 바뀌면 무엇을 해라! onchange
키를 누르면 무엇을 해라! onkeydown

웹브라우저에는 이렇게 10~20개정도의 이벤트가 있다
이걸 이용해서 상호작용하는 웹페이지, 웹사이트를 만들 수 있다!

-------------------------------------------

HTML과 JS의 만남 : 콘솔

꼭 파일이 아니어도 어떤 코드를 실행해야하는 가벼운 상황

웹브라우저 F12 혹은 우클릭->검사 후에 console
(그냥 element에서 esc누르면 console창 반갈 가능!)

일상에서 JS를 실행하려고 또 파일 만들고 쇼를 하기전에 즉석에서 바로 써먹을 수 있다.

console에서 실행하는 JS는 현재 페이지를 대상으로 실행되게 된다.

*이미 만들어져 있는 웹사이트를 내 필요에 따라 내 입맛에 맞게 적당히 써먹을 수도 있다!

-------------------------------------------

데이터타입(자료형) - 문자열과 숫자

컴퓨터 프로그래밍에서는 데이터를 처리하는것이 아주아주 중요한 일이다.
종류별로 잘 분류해야겠죠?
JS에는 어떤 형태의 데이터가 있는가?

여러개 있지만 일단 숫자와 문자로 찍먹해보자.
데이터 타입이란 무엇인가? 그것들의 성격은?

숫자 산술연산자+-*/%

문자 "str" or 'str'

문자의 길이가 알고싶나? str.length      .length는 Properties

메소드도 존재한다

str.toUpperCase()
'Hello world'.toUpperCase()  ->> HELLO WORLD 대문자가 되네!
'Hello world'.indexOf('o')   ->>  4가 나온다. 4번째에 나온다! (0번쨰부터 시작합니다 배열띠..)
'Hello world'.indexOf('world')   ->> 6. 6번째에 나온다!
.trim() 공백을 없애준다

일단 익숙해지자~
나중에 배우면 다 잘할거야~

1은 문자이지만 "1"은 문자입니다
1+1은 2겠지만 "1"+"1"은 "11"이겟죠?

문자열이냐 숫자냐에 따라 결과가 많이 달라질 수 있다.
데이터타입을 정확하게 표현해야 하는 이유!


-------------------------------------------

변수와 대입연산자

변수 : 바뀔 수 있는 어떤 값?
x를 1로도 잡을 수 있고 1000으로도 잡을 수 있지. 변수variable

= 대입연산자 : 오른쪽 항의 값을 왼쪽 변수에 때려박는다 or 좌항과 우항의 값을 결합해서 우항의 값을 만들어낸다?

변수를 왜 쓸까?
너무너무 많은 이유가 있지!

엔터를 바로 때리면 실행이 된다. 실행유보 다음줄까지 넣고싶을땐 shift+엔터

변수 선언할때 var x = 1;
앞에 var 붙여라~ variable의 약자
이것의 장점과 단점을 알기 전까지는 그냥 var을 써라.

-------------------------------------------

웹브라우저 제어

HTML은 정적인 언어이다
JS로 이제 동동동적으로 만들어야지

CSS의 문법
JS로 제어할 태그를 선택하는 방법

-------------------------------------------

CSS기초 : style속성

호에엥? style 소오오오오옥 서어어어어어엉?

-------------------------------------------

CSS기초 : style태그

<div></div> 어떤 의미도 기능도 없다.
CSS, JS로 제어할때 이쁘게 이쁘게 포장해주는 귀요미

하지만 block level element라
inline에 친구들을 쓸때는 <span></span>을 쓰자!

-------------------------------------------

CSS기초 : 선택자

CSS를 효율적으로 구체적으로 지정해서 잘 쓰기 위해!

a >> a태그 친구들
.a >> a클래스 친구들
#a >> a id 친구들

id는 같은거 쓰지마라..

-------------------------------------------

제어할 태그 선택하기

input태그의 속성중에 name은 무엇인가?

onclick이 "큰따옴표로 감싸져 있어서
querySelector에 큰따옴표 쓰니까 병신같이 안먹네ㅡㅡ
왜 java에서 중괄호로 열고 닫는지 깊은 이해가 되는 지점이다.

-------------------------------------------

프로그램, 프로그래밍, 프로그래머

HTML JS 둘다 컴퓨터언어지만
JS는 컴퓨터 프로그래밍 언어에도 속한다.

프로그램 : 순서대로 여러 기능을 사용한다..?
시간의 순서에 따라 실행되어야 할 기능들을 프로그래밍 언어의 문법에 맞게 글로 적어둔다면
그 작업이 필요할때 컴퓨터에게 우쮸쮸 이거해라 하면 되징

HTML은 시간의 순서에 따라 뭐 할 게 없지. 그저 출력 끝
JS는 상호작용을 위해 태어났고 웹브라우저의 여러 기능이 실행되어야 하기 때문에
프로그래밍 언어이지 않을까

처음에는 절차대로 실행되는것만으로도 만족했지만
인간의 욕심은 끝이 없다..!
조건문 반복문 복잡해진 코드의 순서를 정리하는 방법또한 생기기 시작했다.

-------------------------------------------

조건문 예고

하나의 흐름으로 가는게 아니라 조건에 따라 다른 순서의 기능들이 실행되게 하는 것

night day 버튼이 두개나 필요한가? 스위칭하면 안되나? -> 토글(toggle){if, else}

if
비교연산자
불리언

-------------------------------------------

비교연산자와 불리언

=== 여기선 3개넹

좌항과 우항의 관계에 따라서 true, false 중 하나의 값을 만들어내는 연산자

true false -> boolean

비교연산자 <, >가 있겠지만

태그 열고닫는 그거랑 똑같아서
<를 문서에 쓸때는 &lt;라고 표기한다(less than)
>는 &gt; (greater than)

-------------------------------------------

조건문

document.write("1<br>");을 하면
br태그를 읽네..? 1+1의 +를 읽는거랑 같은건가

if(Boolean){ X }else{ Y }
Boolean이 true -> X가 실행 Y는 무시
false -> X는 무시 Y가 실행

-------------------------------------------

조건문의 활용

두개의 버튼을 하나로 퉁칠수도 있다!

-------------------------------------------

리팩토링 중복의 제거

Refactoring 코드 자체를 더 효율적으로 (가독성높이고 유지보수 편하게 하고 중복된 코드 낮추고) 개선

틈틈히 리팩토링하자.

id선택자는 왜 하나만 써야하는지 느끼고있다..

this의 등장! 나 자신맨~

똑같은 document.querySelector('body') 이놈을
var!!!!!! 변수로 선언한다면?? 호에에엥

-------------------------------------------

반복문 예고

while 하이....
for문처럼 생겻네..?

배열 반복문이 나올겁니다.

-------------------------------------------

배열

수납공간. 책이 많아지면 책을 널어놓기보다는 책장에 차곡차곡 이쁘게 쌓아두겠지

-------------------------------------------

반복문

순서대로 실행되는 프로그램의 실행순서의 흐름을 제어하는 제어문
조건문이 필요하넹

언제 종료될지를 지정하는것이 중요하다.

-------------------------------------------

배열과 반복문

순서대로 서로 연관된 데이터를 잘 정리해놓는다면
순서대로 그 배열에 담긴 데이터를 하나씩 꺼내서 자동화해서 이쁘게 잘 만들수 있지 않겟나!

-------------------------------------------

배열과 반복문의 활용

console.log(응애);
응애의 결과가 console창에서 나오너라

-------------------------------------------

함수 예고

수납상자. 코드를 잘 정리정돈하기 위한 코드
코드 < 함수 -->> 객체?

100줄짜리 코드를 쓰는 버튼이 100개라면?
1억줄짜리 코드를 하나의 함수로 저장한다면?
이 얼마나 아름다운 것일까

-------------------------------------------

함수

1, 2, 3, 4로 이루어진 친구가 있다.
1, 2, 3, 2, 3, 2, 3, 4는 반복문으로 할 수 있겠지
1, 2, 3, 4, 2, 3, 2, 3, 4는 반복문으로 할수 있겠나? 연속적이지 않은데?

-------------------------------------------

함수 : 매개변수와 인자

입력과 출력의 관계.

여기는 입력에 관한 이야기

코드의 집합으로 그 기능만을 구현하면서 결과값을 만들어냈을때만 해도 아ㅏㅏㅏ주 혁신적이었다.
하지만 그 기능에 값을 넣었을때마다 그 값에 따른 각자 다른 결과값을 만드는 더 혁신적인 방법을 떠올려보자.

function sum(left, right){X}
함수에 쓸 변수를 지정한다. 함수를 매개로 쓸 변수를 지정한다.
left와 right는 매개변수(parameter)

sum(2,3)
여기서 2와 3은 인자(argument)라고 한다.


*개발자도구에서 console들어가보면 에러가 뜬다!

-------------------------------------------

함수 : 리턴

1+1=2
여기서 1+1은 숫자 2에 대한 표현식이다.

1===1 은 true
1===1은 true에 대한 표현식이다.

sum함수만 쓰게 된다면 별 문제가 없지만, sum함수의 값을 또 써먹어서 다른 함수와 티키타카 하고싶다면?

-------------------------------------------

함수의 활용

버튼 내용을 그대로 함수로 땡겨온다면 안될것이다.
왜냐? 안에 this로 이쁘게 또 감싸놨기 때문, this는 onclick안에서 그 태그를 선택한다는 건데
전역객체를 뜻하는 뜻으로 바뀌어버렷어용~

그럴때 이제 nightDayHandler(self)로 매개변수 잡아놓고
nightDayHandler(this)로 한다면 바로바로 될거에용

-------------------------------------------

객체 예고

프로그래밍에서 큰 산이 두개
하나가 함수 하나가 객체

일단 하나부터 배워봐라. 객체의 한 단면이랄까

정리 정돈의 수단. 폴더 없는 어지러운 내 컴퓨터에서 폴더가 생긴다면?

서로 연관된 함수와 서로 연관된 변수를 잘 정리정돈하기 위한 도구 = 객체?

함수의 또다른 이점 = 명확한 이유를 이름으로 이쁘게 지어줄 수 있다. 이게 왜 여기에 필요한지

한 페이지 안에 수많은 함수가 있었는데
같은 이름의 함수를 또 만들어버렷다면 
setColor(){응애} / setColor(){애응}
결과는 애응이 되버린다(뒤에것으로 덮어쓰기 되어버린다)

그 많은 코드창에서 내가 setColor를 썻나 또 못찾을 경우가 있다

객체에 속해있는 함수들을 메소드라 부른다.

-------------------------------------------

객체 쓰기와 읽기

배열. 순서대로 정리한다는 특성이 있다.
정보를 담는 그릇이면서 정보를 순서대로 정리한다.

순서없이 정보를 저장하는것은? 객체엿따!
아무렇게나 넣는다면.. 쓰레기통이나 다름없지 않을까 다시 꺼내 쓸 일이 없다면?
이름이 있는 정리정돈상자

객체를 만들때 사용하는 기호
object literal 중괄호 {}
배열은 대괄호 객체는 중괄호!

coworkers.programmer
여기서 .은 객체 액세스 연산자(object access operator) / coworkers객체에 접근하는 친구

이미 만들어진 객체에 정보를 추가하고싶다면?
바로 선언띠..
객체에 띄워쓰기도 되네.. 대신에 객체명["응 애"] 이렇게 대괄호로 ㅎ..

-------------------------------------------

객체와 반복문

for(var key in object){ 응애 }

object의 수만큼 응애한다. array의 index처럼 object에는 key가 있는걸까? 
그 key를 object[key]로 한다면? 호에에엥 key값을 가진 객체의 값이 나오넹

어쨋건 이렇게 객체를 다 확인해볼 수 있다.
순서는 보장못함

-------------------------------------------

객체 프로프티와 메소드

객체는 이렇게 문자도 숫자도 담을 수 있지만, 함수마저도 담을 수 있다!
객체에 소속된 함수도 만들 수 있다!

객체에 소속된 함수 = 메소드
객체에 소속된 변수 = property

-------------------------------------------

객체의 활용

객체는 객체의 프로퍼티와 프로퍼티를 구분할때 ,를 찍는다.
한번 데엿지~

-------------------------------------------

파일로 쪼개서 정리정돈하기

css파일로 보내버린거랑 똑같아~
모든 파일에 다 script태그 넣고 나중에 1억개 다 넣겟냐?
만약 색깔을 바꿀때도 1억개 페이지에 다 바꿀거냐?

그럴때 이제 colors.js로 호에에엥
캐시 리하이~

-------------------------------------------

라이브러리와 프레임워크

오늘날 소프트웨어를 혼자서 만드는 경우는 없다!
누군가의 걸작 위에 혹은 걸작을 부품으로 이용해서 새로 만들기 때문
생산자로서 소비자. 소프트웨어의 사회성

라이브러리 - 부품을 땡겨오자
프레임워크 - 만들려는 것의 반제품?
	    ex)게임을 만들려면 게임을 만드는데 꼭 필요한 것들, 공통적인 것들을 샤샤샥 모아놓은 느낌 

프레임워크 안에 들어가서 라이브러리를 땡겨써서 만드는 느낌

라이브러리 - jQuery, React

많은 라이브러리들이 CDN(Content Delivery Network)을 통해
직접 다운로드받고, 자기 프로젝트에 포함시키고, 업로드하는 수고로움을 덜어줍니다.
한마디로 자기네 서버에 이쁘게 js파일을 담아두었다~ 땡겨써라~

이때까지 처리해야할 태그가 여러개일 경우 반복문을 써왔지만 jQuery는 한번에 조져줍니다!

$('a')
이 웹페이지의 모든 a태그를 jQuery가 제어하겠다!
$('a').css('color', color); 
뒤의 color는 매개변수에용 ㅇㅅㅇ. 

수많은 코드들을 직관적으로 효율적으로 사용하기 쉽게 만들어주었다.
결국엔 자주 쓰는 일반적인 친구들을 매번 길게길게 안하게 이쁘게 포장해두었다?

-------------------------------------------

UI vs API

지금까지 내게 숨겨두었던 중요한 기능

Ui = User Interface
API = application Programming Interface

UI 사용자가 시스템을 제어하기 위해서 사용하는 조작장치
API 애플리케이션을 만들기 위해서 프로그래밍을 할 때 사용하는 조작장치
= 응용프로그램을 개발하기 위한 함수의 집합

함수 alert는 경고창을 실행하는 조작장치
이걸 내가 만든건 아니잖아~ 웹브라우저에 박혀있는 기염둥이잖아~

-------------------------------------------

수업을 마치며

실습해라!
나의 프로젝트를 만들어보자!

모든 개념을 총동원하려고 하지말자!
최소한의 도구로만 시작해보자. (그리고 불편함을 느껴라?)
객체 함수 반복문 다 필요없다.
순서대로 한번 가보자. 순서대로 간다는 것이 프로그래밍 아니겟나!

그리고 한계에 부딪힌다면
그때 주의깊게 하나씩 박아넣다보면 마침내 그 개념들을 정복할 것이다.
그러면 또 한계에 부딪히겠지?
그때 다시 공부를 시작하자

한계를 극복하기 위한 검색어 추천
태그를 삭제, 자식태그 추가 - document객체에 대한 검색
그걸로 안된다면? - DOM(Document Object Model) document객체는 dom의 일부이다.
웹브라우저 자체를 제어해야 한다면 window객체의 프로퍼티, 메소드
웹페이지 주소, 새창, 웹브라우저의 화면 크기를 알고싶다
ajax 리로드하지 않고 정보를 변경하고싶다!
cookie 리로드되어도 현재 상태를 유지하고싶다! 사용자를 위한 개인화된 서비스
offline web application 인터넷이 끊겨도 동작하는 웹페이지를 만들고싶다!
webRTC 화상 통신 웹앱
speech 사용자의 음성을 인식하고 음성으로 정보를 전달하고싶다!
3차원그래픽으로 게임과 같은걸? webGL
가상현실? webVR

행운을 빕니다!

-------------------------------------------

